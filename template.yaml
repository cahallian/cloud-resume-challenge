AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Build Template for Cloud Resume Challenge by Ian Cahall

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

#Establish publicly viewable S3 bucket and point to Index.html as Index doc
Resources:
  MyWebsite:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketName: ian-cahall-cloud-website

#Create DynamoDB Table with necessary attributes to work correctly
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: visitors
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ID"
          KeyType: "HASH"

#create new Route53 that points to CloudFront Distro
  MyRoute53Record:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: Z009465335CW1A502K3VY 
      RecordSets:
        - Name: ian-cahall-resume.com
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt MyDistribution.DomainName

#Apply my SSL Certificate so that my custom domain allows HTTPS traffic  
  MyCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: ian-cahall-resume.com
      ValidationMethod: DNS

#Establish Cloudfront Distro that routes traffic from custom domain to S3 Static Website with necessary settings
  MyDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        ViewerCertificate:
          AcmCertificateArn: !Ref MyCertificate
          SslSupportMethod: sni-only
        Aliases:
          - ian-cahall-resume.com
        DefaultCacheBehavior:
          ViewerProtocolPolicy: allow-all
          TargetOriginId: ian-cahall-cloud-website.s3.us-east-1.amazonaws.com
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          ForwardedValues:
            QueryString: false
        Origins:
          - DomainName: ian-cahall-cloud-website.s3.us-east-1.amazonaws.com
            Id: ian-cahall-cloud-website.s3.us-east-1.amazonaws.com
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
        Enabled: true
        DefaultRootObject: index.html

#Create Get Lambda Function that pulls visitor count from my DynamoDB
  GetFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: visitors
      CodeUri: getFunction/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        GetFunction:
          Type: Api 
          Properties:
            Path: /get
            Method: get

#Create Put Function that increases viewer count on refresh and stores new number in my DynamoDB Table
  PutFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: visitors
      CodeUri: putFunction/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        PutFunction:
          Type: Api
          Properties:
            Path: /put
            Method: get

#Establish policy for my S3 Bucket that has it function as a Static Website  
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref MyWebsite
                - /*
      Bucket: !Ref MyWebsite

#Create Guestbook Table to store guestbook entries
  GuestbookTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GuestbookEntries
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

#Create Guestbook Function to handle guestbook submissions
  GuestbookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GuestbookHandler
      Runtime: python3.12
      Handler: app.lambda_handler
      CodeUri: guestbook/
      Environment:
        Variables:
          TABLE_NAME: !Ref GuestbookTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GuestbookTable
      Events:
        GuestbookApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /guestbook
            Method: post

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'POST,OPTIONS'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'https://ian-cahall-resume.com'"

Outputs:
  GuestbookApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/guestbook"